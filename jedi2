### **End-to-End Flow of ADC, JEDi, and Business Calculation Engine Integration with Deployment Strategy**  

#### **Flow Overview**  

1. **Email Processing & Document Procurement**  
   - Emails are processed in **ADC**, and the attached document is procured.  

2. **Routing via Service Mapping**  
   - The **Router Service** in ADC routes the document based on the **service mapping configuration**.  

3. **Existing NT Digitizer Flow**  
   - If the document follows the **NT Digitizer** process, it is uploaded to **Azure Blob Storage** for further processing.  

4. **JEDi Configuration Check & API Call**  
   - If **JEDi is configured** for the document‚Äôs domain, ADC sends the document metadata to **JEDi via API Call**, similar to the NT Digitizer flow.  

5. **JEDi Extraction Process**  
   - The **JEDi Extractor** reads the document from **Azure Blob Storage**.  
   - It sends the document to **Azure Form Recognizer**, which extracts **paragraphs, tables, and key-value pairs**.  
   - A domain-specific **Form Recognizer model** is used for extraction.  

6. **JSON Building & Storage**  
   - After extraction, the **JSON Builder** creates the **Final JEDi JSON** output.  
   - This final JSON is stored in **Cosmos DB** with an **ADCGenID**, making it available for NT Digitizer processing.  

7. **NT Digitizer Processing**  
   - The **Digitizer** reads the document from **Azure Blob Storage**.  
   - It extracts relevant information from the document and processes it further.  

8. **Business Calculation Engine Processing**  
   - The **Digitizer Output** is sent to the **Business Calculation Engine** for calculations.  
   - If a **JEDi Final Output** exists (identified via **ALEGenID**), the Business Calculation Engine **combines both JEDi and Digitizer outputs** for processing.  

9. **Final Output & UI Validation**  
   - The **final JSON output** is sent back to the **Digitizer**.  
   - The extracted and calculated results are displayed on the **UI**, where **BAU users validate the output**.  

---

## **Deployment Strategy**  

- **JEDi Deployment:** Hosted on **Azure App Service**  
- **Business Calculation Engine Deployment:** Hosted on **Azure App Service**  

### **Pros & Cons of Deployment Strategy**  

#### **JEDi & Business Calculation on Azure App Service**  
‚úÖ **Pros:**  
- **Scalability:** Azure App Service allows automatic scaling based on workload demand.  
- **Fully Managed Infrastructure:** No need for on-prem hardware; Microsoft handles server maintenance, patching, and updates.  
- **High Availability & Reliability:** Azure provides built-in redundancy and load balancing.  
- **Improved Performance:** Hosting JEDi and Business Calculation Engine on the same cloud platform reduces latency between services.  
- **Seamless Integration:** API-based communication between ADC, JEDi, and Digitizer aligns well with Azure‚Äôs native services.  
- **Security & Compliance:** Azure provides enterprise-grade security features like **Managed Identity, Private Endpoints, and Role-Based Access Control (RBAC)**.  

‚ùå **Cons:**  
- **Cloud Dependency:** The system is fully reliant on Azure; downtime or service disruptions in Azure regions could impact processing.  
- **Operational Cost:** Although cost-efficient, running multiple App Services with auto-scaling might increase costs compared to on-prem solutions.  
- **Data Compliance Risks:** If the data is sensitive, additional measures like **VNET Integration, Private Link, or Encryption at Rest** might be required.  

---

### **Potential Optimizations**  
- **Hybrid Integration:** Use **Azure Virtual Network (VNet)** to connect securely with other enterprise on-prem systems if needed.  
- **Cost Management:** Implement **Azure Auto-Scaling policies** to optimize cost based on real-time load.  
- **Caching Mechanism:** Use **Azure Redis Cache** to reduce redundant API calls and improve performance.  
- **API Gateway:** Use **Azure API Management** to manage and secure API calls between JEDi, ADC, and Digitizer.  

---

This **cloud-native deployment** ensures **scalability, high availability, and lower maintenance overhead**, making it a future-proof solution. Let me know if you need modifications! üöÄ
